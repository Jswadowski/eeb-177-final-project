{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![badge1](Screenshot_pythonsyntax.png)\n",
    "![badge2](Screenshot_pythonsyntax_quiz.png)\n",
    "![badge3](Screenshot_strings&console.png)\n",
    "![badge4](Screenshot_conditionals_controlflow.png)\n",
    "![badge5](Screenshot_functions.png)\n",
    "![badge6](Screenshot_pythonlists_dictionaries.png)\n",
    "![badge7](Screenshot_lists_and_functions.png)\n",
    "![badge8](Screenshot_loops.png)\n",
    "![badge9](Screenshot_practice_makes_perfect.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Ch. 8 DNA translation (pseudocode)\n",
    "dna = \"some sequence\"\n",
    "\n",
    "def variable(dna):  \n",
    "  no_incompletes = equation to only get triplet codons  \n",
    "  protein = \"\"     #holds sequence before loop  \n",
    "\n",
    "  for split in range(start, finish, step):     #splitting sequence into codons  \n",
    "      codon = dna[range]  \n",
    "      AA = dictionaryused.get(codon, unknown base second argument)   #getting amino acid for each codon  \n",
    "      protein = protein + AA  \n",
    "  return protein  \n",
    "\n",
    "print statement     #call function by passing some sequence  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MRVSF\n"
     ]
    }
   ],
   "source": [
    "#with open(\"genetic_code.txt\") as Z:\n",
    "    #gencode = Z.readlines()\n",
    "gencode = {\n",
    "    'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',\n",
    "    'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',\n",
    "    'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',\n",
    "    'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',\n",
    "    'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',\n",
    "    'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',\n",
    "    'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',\n",
    "    'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',\n",
    "    'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',\n",
    "    'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',\n",
    "    'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',\n",
    "    'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',\n",
    "    'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',\n",
    "    'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',\n",
    "    'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',\n",
    "    'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W'}\n",
    "def dna_translation(dna):\n",
    "    triplet_codons_only = len(dna) - 2     #only include bases in miltiples of 3\n",
    "    protein = \"\"\n",
    "    for begin in range(0, triplet_codons_only, 3):\n",
    "        codon = dna[begin:begin+3]    #finding the stop position for any starting position\n",
    "        AA = gencode.get(codon, '?')   #using .get() second argument to protect against unknown bases\n",
    "        protein = protein + AA     #building up the complete sequence \n",
    "    return protein\n",
    "\n",
    "print(dna_translation(\"ATGCGTGTTTCGTTCGA\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Chapter 4 Allesina and Wilmes "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import scipy # for random numbers\n",
    "\n",
    "def build_population(N, p):\n",
    "    \"\"\"The population consists of N individuals.\n",
    "Each individual has two chromosomes, containing allele \"A\" or \"a\", with probability p and 1-p, respectively.\n",
    "       The population is a list of tuples.\n",
    "        \"\"\"\n",
    "    population = [] \n",
    "    for i in range(N):\n",
    "        allele1 = \"A\"\n",
    "        if scipy.random.rand() > p:\n",
    "            allele1 = \"a\"\n",
    "        allele2 = \"A\"\n",
    "        if scipy.random.rand() > p:\n",
    "            allele2 = \"a\" \n",
    "        population.append((allele1, allele2))\n",
    "    return population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def compute_frequencies(population): \n",
    "    \"\"\" Count the genotypes.\n",
    "      Returns a dictionary with counts for each genotype.\n",
    "    \"\"\"\n",
    "    AA = population.count(('A', 'A')) \n",
    "    Aa = population.count(('A', 'a'))\n",
    "    aA = population.count(('a', 'A')) \n",
    "    aa = population.count(('a', 'a')) \n",
    "    return({'AA': AA,\n",
    "            'aa': aa, \n",
    "            'Aa': Aa, \n",
    "            'aA': aA})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def reproduce_population(population):\n",
    "    \"\"\" Create a new generation through sexual reproduction\n",
    "        For each of N new offspring:\n",
    "        - Choose the parents at random\n",
    "        - The offspring receives a chromosomes from each of\n",
    "           the parents\n",
    "    \"\"\"\n",
    "    new_generation = [] \n",
    "    N = len(population) \n",
    "    for i in range(N):\n",
    "        dad = scipy.random.randint(N) # random integer between 0 and N-1\n",
    "        mom = scipy.random.randint(N)\n",
    "        chr_mom = scipy.random.randint(2) # which chromosome comes from mom\n",
    "        offspring = (population[mom][chr_mom], population[dad][1 - chr_mom])\n",
    "        new_generation.append(offspring) \n",
    "    return(new_generation)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.9.1:  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Fish', 'Fish', 'Fish', 'Amphibian', 'Amphibian', 'Amphibian', 'Amphibian', 'Amphibian', 'Amphibian', 'Amphibian'] [-0.11, 0.38, 0.51, 0.868, 0.297, 0.084, 0.121, 0.114, 0.021, 0.704]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.18552824175524468"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#part 1: write a function that takes as input the desired Taxon and returns the mean value of r\n",
    "import csv\n",
    "\n",
    "with open('Jiang2013_data.csv') as Z:\n",
    "    file = csv.DictReader(Z, delimiter = '\\t')\n",
    "    taxa = []   #list will store taxon names\n",
    "    mean_r = []  #list will store mean value of r\n",
    "    for line in file:\n",
    "        taxa.append(line['Taxon'])\n",
    "        mean_r = [float(x) for x in mean_r]   #must change values from strings to ints\n",
    "        mean_r.append(line['r'])\n",
    "print(taxa[0:10], mean_r[0:10])\n",
    "\n",
    "def mean_r_value(scientific_name, value, taxon_desired = 'Amphibian'):  #get mean r value from Taxon category\n",
    "    length = len(scientific_name)\n",
    "    #variables initialized set to 0\n",
    "    mval = 0\n",
    "    sample_size = 0\n",
    "    for f in range(length):\n",
    "        if scientific_name[f] == taxon_desired:\n",
    "             #results of the loop\n",
    "            mval = mval + value[f]   \n",
    "            sample_size = sample_size + 1\n",
    "    return mval / sample_size\n",
    "mean_r_value(taxa, mean_r, taxon_desired = 'Amphibian')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "#### go to office hours to work on bonus parts 2 and 3...  \n",
    "#### Possible steps:\n",
    "-Use def mean_r_value to get mean r value  \n",
    "-List the scientific_name and output a random assortment to 'scramble' using a for loop  \n",
    "-Find the p value also within the for loop, as it relates to the mean r values of the scrambled scientific names of taxon of interest  \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
